func main() {
 -	fmt.Printf("server listen on :%d \n", conf.SCSCConfig.Node.Port)
 +	log.Info("server listen on :%d \n", conf.SCSCConfig.Node.Port)
  	err := http.ListenAndServe(fmt.Sprintf(":%d", conf.SCSCConfig.Node.Port), nil)
  	if err != nil {
  		fmt.Println(err.Error())
 @@ -65,7 +63,7 @@ func InitService(confPath string) error {
  	if err != nil {
  		return err
  	}
 -	fmt.Printf("Current SCSC version is %s. \n", conf.SCSCConfig.Version)
 +	log.Info("Current SCSC version is %s. \n", conf.SCSCConfig.Version)
  	err = initDB()
  	if err != nil {
  		return err
 @@ -85,36 +83,12 @@ func InitService(confPath string) error {
  }
  
  func initPeerId() error {
 -	if !bytes.Equal(conf.SCSCConfig.PrivateKey, []byte("")) {
 -		fmt.Printf("Current peerId is: %s . \n", conf.SCSCConfig.Node.PeerId)
 -		return nil
 -	}
 -	peerInfoKey := []byte("peerIdInfo")
 -	v, err := db.GetDBInst().Get(peerInfoKey)
 -	if err != nil || nil == v || 0 == len(v) {
 -		pub, priv := crypto.GenerateKeyPair()
 -		conf.SCSCConfig.PrivateKey = priv
 -		conf.SCSCConfig.Node.PeerId = hex.EncodeToString(crypto.Sha3_256(pub))
 -		err = db.GetDBInst().Set(peerInfoKey, priv)
 -		if err != nil {
 -			fmt.Println(err)
 -			return err
 -		}
 +	if !strings.EqualFold(conf.SCSCConfig.PrivateKey, "") {
 +		log.Info("Peer private key is: %s .", conf.SCSCConfig.PrivateKey)
 +		log.Info("Current peerId is: %s .", conf.SCSCConfig.Node.PeerId)
  	} else {
 -		conf.SCSCConfig.PrivateKey = v
 -		data := crypto.Sha3_256(v)
 -		cryptoData, err := crypto.Crypto(data, v)
 -		if err != nil {
 -			fmt.Println(err)
 -			return err
 -		}
 -		pub, err := crypto.RecoverPubKey(data, cryptoData)
 -		conf.SCSCConfig.Node.PeerId = hex.EncodeToString(crypto.Sha3_256(pub))
 +		log.Info("This is not delegate node.")
  	}
 -
 -	fmt.Println("Peer private key is: ", hex.EncodeToString(conf.SCSCConfig.PrivateKey))
 -	fmt.Printf("Current peerId is %s . \n", conf.SCSCConfig.Node.PeerId)
 -
  	return nil
  }
